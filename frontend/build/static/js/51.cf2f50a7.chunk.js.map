{"version":3,"file":"static/js/51.cf2f50a7.chunk.js","mappings":"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","sources":["screens/LoginScreen.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport {AiOutlineLogin} from 'react-icons/ai'\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../store';\r\n\r\nconst LoginScreen = () => {\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    })\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth)\r\n    const [formError, setFormError] = useState({});\r\n    const [message, setMessage] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            dispatch(authActions.message(''));\r\n        }, 2000)\r\n        return () => {\r\n            clearTimeout(timer);\r\n        }\r\n    })\r\n\r\n    //memoizing function\r\n    const changeHandler = useCallback((e) => {\r\n        // settinf form data\r\n      //  console.log(e.target.value);\r\n        setFormData((prev) => {\r\n            return {\r\n                ...prev,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        })\r\n    },[])\r\n\r\n    const validateForm = useCallback(() => {\r\n        let error = {}\r\n\r\n        if (formData.email === '') {\r\n            error.email = 'Email required!'\r\n        } else {\r\n            let Regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n            if(!Regex.test(formData.email)) {\r\n                error.email = 'Invalid Email'\r\n            }\r\n        }\r\n\r\n        if (formData.password === '') {\r\n            error.password = 'password required!'\r\n        } else if (formData.password.length < 5) {\r\n            error.password = \"Length should be min 5 characters\"\r\n        }\r\n\r\n        setFormError({ ...error });\r\n\r\n        return Object.keys(error).length < 1;\r\n    }, [formData])\r\n\r\n     //Form submit \r\n    // send request to server\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        dispatch(authActions.isLoading())\r\n        let isvalid= validateForm()\r\n\r\n        if(!isvalid) {\r\n            dispatch(authActions.stopLoading())\r\n            return;\r\n        }\r\n\r\n        axios.post('/api/user/login', {\r\n            email: formData.email,\r\n            password: formData.password\r\n        })\r\n        .then(res => {\r\n            //if success get data\r\n            if(parseInt(res.status) === 200) {\r\n                localStorage.setItem('TOKEN', res.data.token); \r\n                localStorage.setItem('USER', JSON.stringify(res.data.newUser)); \r\n                localStorage.setItem('USERID', JSON.stringify(res.data.newUser.id))\r\n                dispatch(authActions.message(\"Login successful\"));\r\n                dispatch(authActions.login({\r\n                    user: res.data.newUser,\r\n                    token: res.data.token\r\n                }))\r\n                dispatch(authActions.message(res.data.message));\r\n                history.replace('/')\r\n            }\r\n            setFormData({\r\n                email: \"\",\r\n                password: \"\"\r\n            })\r\n        }).catch(err => {\r\n            console.log(err);\r\n            const errorMessage = (err.response &&\r\n                 err.response.data && \r\n                 err.response.data.message) \r\n                 || err.message || err.toString();\r\n\r\n            dispatch(authActions.message(errorMessage));\r\n        }).finally(() => {\r\n            dispatch(authActions.stopLoading())\r\n        })\r\n    }\r\n\r\n    return <>\r\n        <section className='Login-header'>\r\n            <h1>\r\n                <AiOutlineLogin/>\r\n                Login\r\n            </h1>\r\n        </section>\r\n\r\n        <p className='not-valid'>{auth.message}</p>\r\n\r\n        <section className=''>\r\n            <form onSubmit={submitHandler}>\r\n                <div>\r\n                    <label htmlFor='email' className='input-label'>Email</label> <br/>\r\n                    <input className='input'\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder='Enter email'\r\n                    value={formData.email}\r\n                    onChange={changeHandler}\r\n                    ></input>\r\n                    <span className='not-valid'>{formError.email}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor='password' className='input-label'>Password</label> <br/>\r\n                    <input\r\n                     className='input'\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    value={formData.password}\r\n                    placeholder='Enter password..'\r\n                    onChange={changeHandler}\r\n                    ></input>\r\n                    <span className='not-valid'>{formError.password}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <button type='submit' className='btn-login' disabled={auth.isLoading}> {auth.isLoading?\"Loading ...\" : \"Login\"} </button>\r\n                </div>\r\n            </form>\r\n        </section>\r\n    </>\r\n}\r\n\r\nexport default LoginScreen;"],"names":["useState","email","password","formData","setFormData","dispatch","useDispatch","auth","useSelector","state","formError","setFormError","history","useHistory","useEffect","timer","setTimeout","authActions","clearTimeout","changeHandler","useCallback","e","prev","target","name","value","validateForm","error","test","length","Object","keys","className","message","onSubmit","preventDefault","axios","then","res","parseInt","status","localStorage","setItem","data","token","JSON","stringify","newUser","id","user","replace","catch","err","console","log","errorMessage","response","toString","finally","htmlFor","type","placeholder","onChange","disabled","isLoading"],"sourceRoot":""}
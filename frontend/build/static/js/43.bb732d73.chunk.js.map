{"version":3,"file":"static/js/43.bb732d73.chunk.js","mappings":"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","sources":["screens/RegisterScreen.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {AiOutlineLogin} from 'react-icons/ai'\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../store';\r\n\r\nconst RegisterScreen = () => {\r\n    const [formData, setFormData] = useState({\r\n        username:\"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\"\r\n    })\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth)\r\n    const [formError, setFormError] = useState({})\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            dispatch(authActions.message(''));\r\n        }, 2000)\r\n        return () => {\r\n            clearTimeout(timer);\r\n        }\r\n    })\r\n\r\n    \r\n    const changeHandler = (e) => {\r\n        setFormData((prev) => {\r\n            return {\r\n                ...prev,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        })\r\n    }\r\n    \r\n    // Validating form data\r\n    const validateForm = () => {\r\n        let error = {}\r\n        \r\n        if(formData.username === '') {\r\n            error.username = \"Username is requied\"\r\n        } else if(Number.parseInt(formData.username.length) < 5) {\r\n            error.username = \"Username should be min 5 characters\"\r\n        }\r\n\r\n        if(formData.email === '') {\r\n            error.email = 'Email is required!'\r\n        } else {\r\n            let Regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n            if(!Regex.test(formData.email)) {\r\n                error.email = 'Invalid Email'\r\n            }\r\n        }\r\n\r\n        if(formData.password === '') {\r\n            error.password = 'password required!'\r\n        }else if(formData.confirmPassword === '') {\r\n            error.confirmPassword = 'confirm Password required!'\r\n        }else if(formData.password.length < 5 || formData.confirmPassword.length < 5) {\r\n            error.password = \"password should be min 5 characters\"\r\n            error.confirmPassword = \"password should be min 5 characters\"\r\n        }else if(formData.password !== formData.confirmPassword) {\r\n            error.password = 'Password not matched'\r\n            error.confirmPassword = 'Password not matched'\r\n        }\r\n\r\n\r\n        setFormError({ ...error });\r\n\r\n        return Object.keys(error).length < 1;\r\n    }\r\n\r\n    //Form submit \r\n    // send request to server\r\n    const submitHandler =  (e) => {\r\n        e.preventDefault();\r\n\r\n        dispatch(authActions.isLoading())\r\n        let isvalid = validateForm()\r\n        if(!isvalid) {\r\n            dispatch(authActions.stopLoading())\r\n            return;\r\n        }\r\n\r\n        axios.post('/api/user/register', {\r\n            name: formData.username,\r\n            email: formData.email,\r\n            password: formData.password\r\n        })\r\n        .then(res => {\r\n            //console.log(res);\r\n            if(parseInt(res.status) === 201) {\r\n                localStorage.setItem('TOKEN', res.data.token); \r\n                localStorage.setItem('USER', JSON.stringify(res.data.newUser)); \r\n                localStorage.setItem('USERID', JSON.stringify(res.data.newUser.id))\r\n                dispatch(authActions.login({\r\n                    user: res.data.newUser,\r\n                    token: res.data.token\r\n                }))\r\n                dispatch(authActions.message(res.data.message));\r\n                history.replace('/')\r\n            }\r\n            setFormData({\r\n                username:\"\",\r\n                email: \"\",\r\n                password: \"\",\r\n                confirmPassword: \"\"\r\n            })\r\n        }).catch(err => {\r\n            console.log(err);\r\n            const errorMessage = (err.response &&\r\n                 err.response.data && \r\n                 err.response.data.message) \r\n                 || err.message || err.toString();\r\n\r\n            dispatch(authActions.message(errorMessage));\r\n          \r\n        }).finally(() => {\r\n            dispatch(authActions.stopLoading())\r\n        })\r\n    }\r\n\r\n\r\n    return <>\r\n        <section className='Login-header'>\r\n            <h1>\r\n                <AiOutlineLogin/>\r\n                Register\r\n            </h1>\r\n        </section>\r\n\r\n        <p className='not-valid'>{auth.message}</p> \r\n\r\n        <section>\r\n            <form onSubmit={submitHandler}>\r\n                 <div>\r\n                    <label htmlFor='username' className='input-label'>username</label> <br/>\r\n                    <input\r\n                    className='input'\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    value={formData.username}\r\n                    onChange={changeHandler}\r\n                    placeholder='Enter username'\r\n                    ></input>\r\n                    <span className='not-valid'>{formError.username}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor='email' className='input-label'>Email</label> <br/>\r\n                    <input\r\n                    className='input'\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={formData.email}\r\n                    placeholder='Enter email ...'\r\n                    onChange={changeHandler}\r\n                    ></input>\r\n                    <span className='not-valid'>{formError.email}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor='password' className='input-label'>Password</label> <br/>\r\n                    <input\r\n                    className='input'\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder='Enter password'\r\n                    value={formData.password}\r\n                    onChange={changeHandler}\r\n                    ></input>\r\n                    <span className='not-valid'>{formError.password}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor='confirmPassword' className='input-label'>Confirm Password</label> <br/>\r\n                    <input\r\n                    className='input'\r\n                    placeholder='Enter confirm password..'\r\n                    type=\"password\"\r\n                    name=\"confirmPassword\"\r\n                    value={formData.confirmPassword}\r\n                    onChange={changeHandler}\r\n                    ></input>\r\n                    <span className='not-valid'>{formError.confirmPassword}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <button type='submit' className='btn-login' disabled={auth.isLoading}> {auth.isLoading?\"Loading ...\" : \"Register\"} </button>\r\n                </div>\r\n            </form>\r\n        </section>\r\n    </>\r\n}\r\n\r\nexport default RegisterScreen;"],"names":["useState","username","email","password","confirmPassword","formData","setFormData","dispatch","useDispatch","auth","useSelector","state","formError","setFormError","history","useHistory","useEffect","timer","setTimeout","authActions","clearTimeout","changeHandler","e","prev","target","name","value","className","message","onSubmit","preventDefault","error","Number","parseInt","length","test","Object","keys","validateForm","axios","then","res","status","localStorage","setItem","data","token","JSON","stringify","newUser","id","user","replace","catch","err","console","log","errorMessage","response","toString","finally","htmlFor","type","onChange","placeholder","disabled","isLoading"],"sourceRoot":""}